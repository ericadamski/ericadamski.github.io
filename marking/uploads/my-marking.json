{"markingScheme":{"questions":[{"breakdown":[{"description":"having a base class whose name makes sense and that other classes extend from","total":2,"got":0},{"description":"having useful constructors","total":1,"got":0},{"description":"attributes being model-specific","total":1,"got":0},{"description":"correctly including the abstract methods in the base class","total":2,"got":0},{"description":"making three classes that will represent something reasonable in the animation","total":1,"got":0},{"description":"extending the base class and introducing any needed additional attributes/behaviour","total":2,"got":0},{"description":"implementing a different behavior for the abstract methods","total":3,"got":0},{"description":"storing an ArrayList with references corresponding to the base class type","total":1,"got":0},{"description":"adding methods that make up a reasonable public interface for the view and controller","total":1,"got":0},{"description":"method that will call move on each object in the ArrayList","total":1,"got":0},{"description":"method that will call react on each object in the ArrayList","total":1,"got":0},{"description":"correctly using polymorphism when looping through the ArrayList","total":2,"got":0},{"description":"storing a reference to the PApplet subclass","total":1,"got":0},{"description":"storing a reference to the model","total":1,"got":0},{"description":"storing the correct references in view constructor","total":2,"got":0},{"description":"creating anything else needed","total":1,"got":0},{"description":"somehow getting all the items to draw using the model class’s public methods","total":1,"got":0},{"description":"somehow iterating through all the items and not casting them to their subclass types","total":1,"got":0},{"description":"asking the items about their properties and using only those to draw them","total":1,"got":0},{"description":"using Processing commands via the PApplet reference to draw the objects","total":2,"got":0},{"description":"starting with the skeleton file","total":1,"got":0},{"description":"creating new instances of the model and view","total":1,"got":0},{"description":"correctly calling a method inside the model class that will make updates that should happen each frame","total":2,"got":0},{"description":"calling the view’s drawing method and not doing any drawing right in draw","total":2,"got":0},{"description":"implementing a mouseClicked that causes the model to react","total":2,"got":0}],"comments":""},{"breakdown":[{"description":"setting up result string and adding the data to it right away","total":1,"got":0},{"description":"checking if each child is null or not","total":1,"got":0},{"description":"making each recursive call properly","total":2,"got":0},{"description":"putting together the subproblem solutions properly","total":1,"got":0},{"description":"working on all test cases","total":1,"got":0},{"description":"modified their code correctly","total":1,"got":0},{"description":"correct base case check","total":1,"got":0},{"description":"correct return in base case","total":1,"got":0},{"description":"breaking the problem down","total":1,"got":0},{"description":"making the recursive call","total":1,"got":0},{"description":"knowing they have to check down both branches of the tree","total":1,"got":0},{"description":"correctly combining the results of the recursive calls and returning that","total":1,"got":0},{"description":"output being correct","total":1,"got":0}],"comments":""}]},"students":[]}